#!/usr/bin/env python3

from typing import Optional, List, Set, Tuple
import sys
import os
import time
import datetime
import curses
import traceback

char = str
Pos = Tuple[int, int]


class Theme:
    black = "#0d0f18"
    white = "#75869a"
    red = "#ef534f"
    green = "#4d6e2a"
    blue = "#2c7fff"
    dull = "#2e353d"


translations = {
    "\t": "    ",
    "…": "...",
    "‘": "'",
    "’": "'",
    "“": '"',
    "”": '"',
    "—": "--",
}

width: int = 80
height: int = 10
newline_char: char = "↲"
space_char: char = "␣"
print("\033[4 q", end="", flush=True)  # use underline cursor


class TypistException(Exception):
    def __init__(self, *args) -> None:
        super().__init__(*args)


def log(*args):
    with open("log.txt", "a") as log:
        print(file=log, *args)


def rgb(hex):
    return (int(int(hex[i : i + 2], 16) * 1000 / 255) for i in range(1, 6, 2))


class Screen:
    lines: List[str]
    keys: int
    errors: int
    start: float
    newline: char
    typos: Set[Pos]
    typo: Optional[Pos]
    typed: List[List[char]]
    cy: int
    cx: int

    def __init__(self, scr) -> None:
        self.scr = scr
        self.lines = list()
        self.typed = list()
        self.typos = set()
        self.newline = " "
        self.vline_prev = -1

        self.init_width()
        self.init_input()
        self.init_height()
        self.init_tty()
        self.init_theme()
        self.init_pad()
        self.reset()

    def init_tty(self):
        with open("/dev/tty", "r+") as tty_file:
            os.dup2(tty_file.fileno(), 0)

    def init_width(self):
        global width
        width = min(width, curses.COLS - 10)
        if width < 20:
            raise TypistException("terminal width is too small")

    def init_input(self):
        trans = str.maketrans({ord(k): v for k, v in translations.items()})
        for line in sys.stdin:
            line = line.translate(trans)
            line = line.encode("ascii", "ignore").decode("ascii")  # rm non-ascii chars
            if len(line) > width:
                self.lines.extend(fold(line, width))
            else:
                self.lines.append(line)
        # remove trailing empty newlines
        while self.lines and self.lines[-1] == "\n":
            self.lines.pop()
        # remove trailing whitespace
        self.lines[-1] = self.lines[-1].rstrip()
        if not self.lines:
            raise TypistException("empty input")

    def init_height(self):
        global height
        height = min(height, len(self.lines), curses.LINES - 1)
        if height < 1:
            raise TypistException("terminal height is too small")

    def init_theme(self):
        if curses.has_colors() and curses.can_change_color():
            curses.init_color(curses.COLOR_BLACK, *rgb(Theme.black))
            curses.init_color(curses.COLOR_WHITE, *rgb(Theme.white))
            curses.init_color(curses.COLOR_RED, *rgb(Theme.red))
            curses.init_color(curses.COLOR_GREEN, *rgb(Theme.green))
            curses.init_color(curses.COLOR_BLUE, *rgb(Theme.blue))
            curses.init_color(curses.COLOR_MAGENTA, *rgb(Theme.dull))
            bg = curses.COLOR_BLACK
        else:
            curses.use_default_colors()
            bg = -1

        curses.init_pair(1, curses.COLOR_RED, bg)
        curses.init_pair(2, curses.COLOR_GREEN, bg)
        curses.init_pair(3, curses.COLOR_BLUE, bg)
        curses.init_pair(4, curses.COLOR_MAGENTA, bg)

        self.red = curses.color_pair(1)
        self.green = curses.color_pair(2)
        self.blue = curses.color_pair(3)
        self.dull = curses.color_pair(4)

    def init_pad(self):
        self.pad = curses.newpad(len(self.lines) + max(height, 10), width)
        y, x = self.scr.getmaxyx()
        y, x = (y - height) // 2, (x - width) // 2
        yy, xx = y + height - 1, x + width - 1
        self.pad_location = (y, x, yy, xx)
        # draw ruler
        while y <= yy:
            self.scr.addch(y, x + width, "│", self.dull)
            y += 1

    def reset(self):
        self.typed.clear()
        self.typos.clear()
        self.typo = None
        self.errors = 0
        self.keys = 0
        self.vline = 0
        self.cx, self.cy = 0, 0
        self.pad.clear()
        for i, line in enumerate(self.lines):
            self.pad.addstr(i, 0, line)

    def refresh(self):
        if self.vline_prev != self.vline:
            self.vline_prev = self.vline
            self.scr.addch(
                self.pad_location[0] + height,
                self.pad_location[1] + width // 2,
                " " if self.vline + height >= len(self.lines) else "⌄",
            )
            self.scr.refresh()
        self.pad.move(self.cy, self.cx)
        self.pad.refresh(self.vline, 0, *self.pad_location)

    def add_typed(self, ch):
        if not self.keys:
            self.start = time.perf_counter()
        self.keys += 1
        if self.cy >= len(self.typed):
            self.typed.append(list())
        self.typed[-1].append(ch)
        if self.cy < len(self.lines) and ch == self.lines[self.cy][self.cx]:
            color = self.blue if (self.cy, self.cx) in self.typos else self.green
            self.pad.addch(ch, color)
        else:
            self.errors += 1
            self.typos.add((self.cy, self.cx))
            if self.typo is None:
                self.typo = (self.cy, self.cx)
            if ch == "\n":
                ch = newline_char
            elif ch == " ":
                ch = space_char
            self.pad.addch(ch, self.red)

    def undo_typed(self):
        self.typed[-1].pop()
        if not self.typed[-1]:
            self.typed.pop()
        ch = self.lines[self.cy][self.cx] if self.cy < len(self.lines) else " "
        if ch == "\n":
            ch = self.newline
        self.pad.addch(self.cy, self.cx, ch)
        if self.typo == (self.cy, self.cx):
            self.typo = None

    def erase_word(self):
        t = self.typed[-1]
        while t and t[-1] == " ":
            self.cx -= 1
            self.undo_typed()
        while t and t[-1] != " ":
            self.cx -= 1
            self.undo_typed()

    def on_backspace(self):
        if self.cx == 0 and self.cy == 0:
            return
        if self.cx > 0:
            self.cx -= 1
            self.undo_typed()
            if self.cy != 0 and self.cy < len(self.lines):
                # skip indent backward
                skip = True
                for ch in reversed(self.lines[self.cy][: self.cx + 1]):
                    if ch != " ":
                        skip = False
                        break
                if skip:
                    self.cy -= 1
                    self.cx = len(self.lines[self.cy]) - 1
        else:
            self.cy -= 1
            self.cx = (
                len(self.lines[self.cy]) - 1 if self.cy < len(self.lines) else width - 1
            )
            self.undo_typed()
        if self.cy < self.vline:
            self.vline -= 1

    def on_char(self, key):
        self.add_typed(key)
        if self.cy >= len(self.lines):
            self.cx += 1
            if self.cx == width:
                self.cx = 0
                self.cy += 1
        else:
            skip = self.lines[self.cy][self.cx] == "\n"
            self.cx += 1
            if self.cx == len(self.lines[self.cy]):
                self.cx = 0
                self.cy += 1
            if self.cy == len(self.lines) and self.typo is None:
                return True
            if skip:  # skip indent forward
                for ch in self.lines[self.cy]:
                    if ch != " ":
                        break
                    self.cx += 1
            if self.cy == self.vline + height - 1:
                self.vline = min(self.cy, len(self.lines) - height)
        if self.cy >= self.vline + height:
            self.vline = self.cy
        return False

    def run(self):
        scr = self.scr
        curses.set_escdelay(25)
        scr.refresh()

        self.refresh()
        while True:
            key = scr.getch()
            if key == 27:  # escape; exit
                break
            elif key == 23:  # ctrl+w: erase word
                self.erase_word()
            elif key == 9:  # tab: reset
                self.reset()
            elif key == curses.KEY_BACKSPACE or key == 127:  # backspace
                self.on_backspace()
            elif key == 10 or (key >= 32 and key <= 126):
                if self.on_char(chr(key)):
                    break
            else:
                continue
            self.refresh()
        return self.results() if self.keys > 0 else ""

    def results(self):
        sec = time.perf_counter() - self.start
        chars = sum(len(line) for line in self.typed)
        acc = 100 * (self.keys - self.errors) / self.keys
        raw = (60 * self.keys) / (5 * sec)
        wpm = (60 * (self.keys - self.errors)) / (5 * sec)
        delta = str(datetime.timedelta(seconds=sec))
        delta = delta.removeprefix("0:").removeprefix("00:")
        if "." in delta:
            delta = delta[:-4]
        return (
            f"wpm:      {format_float(wpm)}\n"
            f"raw:      {format_float(raw)}\n"
            f"accuracy: {format_float(acc)}\n"
            f"chars:    {chars}\n"
            f"typed:    {self.keys}\n"
            f"errors:   {self.errors}\n"
            f"time:     {delta}\n"
        )


def fold(text, width):
    while text:
        if len(text) <= width:
            yield text
            return
        w = width
        if text[w] == " " or text[w - 1] != " ":
            while w > 0 and text[w - 1] != " ":
                w -= 1
        if not w:
            w = width
        line = text[:w]
        text = text[w:]
        yield line


def format_float(v):
    s = f"{v:.2f}"
    while "." in s and s.endswith("0"):
        s = s[:-1]
    return s.rstrip(".")


try:
    results = curses.wrapper(lambda scr: Screen(scr).run())
    print(results, end="")
except KeyboardInterrupt:
    sys.exit(1)
except TypistException as ex:
    print(ex, file=sys.stderr)
    sys.exit(1)
except Exception:
    traceback.print_exc()
    sys.exit(1)
