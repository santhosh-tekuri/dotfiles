#!/usr/bin/env bash


# defaults --
green=$(tput setaf 2)
red=$(tput setaf 1)
reset=$(tput sgr0)

newline_char=↲
space_char=␣
lang=english
n=50
w=100
h=10

# check commands --

for cmd in jq shuf; do
    command -v $cmd >/dev/null 2>&1 || {
        >&2 echo "$cmd command not found"
        exit 1
    }
done

# --

set -e
set -o pipefail

newline=' '
caps=none

usage=$(cat <<EOF
USAGE: typist [options...]

-l <language>       monkeytype language or 'os' or 'keybr'
                    default english
-n <words>          number of words
                    default 50
-q <size>           quote of size (short, medium, long, thick)
-z                  practice a zen story
-W <num>            text width
-H <num>            text height
-c                  captalize words randomly
-C                  capitalize all words
-p                  add punctuation
-P <punctuations>   add given punctuations
-s                  add symbols
-S <symbols>        add given symbols
-d                  add digits
-D <symbols>        add given digits
-L                  treat stdin as language
-N                  show newlines
-r                  story from reddit
-h                  show this help

shortcuts:
    <tab> to restart
    <esc> twice to quit

to practice some random words:
    typist -l english_5k -n 100
    typist -l code_rust -n 50

to practice a zen story:
    typist -z

to practice capitals:
    typist -c # capitalizes words randomly
    typist -C # capitalizes all words

to practice punctuations:
    typist -p
    typist -P '.,!' # to practice specific punctuations

to practice symbols:
    typist -s
    typist -S '&^^' # to practice specific symbols

to practice quotes:
    typist -q medium

to practice reddit story:
    typist -r

you can provide your own text to type
    pbpaste | typist # type from clipboard
    yes however | head -n 50 | typist

you can just copy the text generated and use it in your
favorite typing site:
    typist -C | pbcopy
EOF
)

while getopts ":hLNq:l:n:cCpP:sS:W:H:zdD:r" opt; do
    case $opt in
    \?) # Invalid option
        >&2 echo "Error: Invalid option -$OPTARG"
        >&2 echo "$usage"
        exit 2
        ;;
    :) # Missing argument for an option
        >&2 echo "Error: Option -$OPTARG requires an argument"
        >&2 echo "$usage"
        exit 2
        ;;
    h)
        echo "$usage"
        exit 0
        ;;
    L)
        lang=stdin
        ;;
    N)
        newline=$newline_char
        ;;
    q)
        qsize="$OPTARG"
        ;;
    l)
        lang="$OPTARG"
        ;;
    n)
        n="$OPTARG"
        ;;
    W)
        w="$OPTARG"
        ;;
    H)
        h="$OPTARG"
        ;;
    c)
        caps=rand
        ;;
    C)
        caps=all
        ;;
    p)
        symbols=",.-?!:;'\"()"
        ;;
    s)
        symbols='`~!@#$%^&*()-_=+[{}];":,<.>/?\\|'\'
        ;;
    P|S)
        symbols="$OPTARG"
        ;;
    z)
        zen=$(printf "%03d.md" $(((RANDOM%101)+1)))
        ;;
    d)
        digits=1234567890
        ;;
    D)
        digits="$OPTARG"
        ;;
    r)
        reddit=true
        ;;
    esac
done
symbols+="$digits"

sanitize() {
    text=$(echo -n "$text" | tr "’“”—" "'\"\"-" | sed -e 's/…/.../g' -e 's/\r//g')
}

if [ ! -t 0 ]; then
    text=$(cat)
    sanitize
    if [[ "$lang" == "stdin" ]]; then
        text=$(echo "$text" | tr '\n' ' ' | awk '{$1=$1};1')
    fi
elif [ "$qsize" != "" ]; then
    case "$qsize" in
    short)
        qsize='length >= 1 && length <= 100' ;;
    medium)
        qsize='length >= 101 && length <= 300' ;;
    long)
        qsize='length >= 301 && length <= 600' ;;
    thick)
        qsize='length >= 601' ;;
    *)
        >&2 echo invalid quote size. valid are short, medium, long, thick
        exit 2
        ;;
    esac
    file=~/.local/share/typist/quotes
    if [ ! -f "$file" ]; then
        >&2 echo downloading quotes
        mkdir -p "$(dirname "$file")"
        if ! curl -sS --fail https://raw.githubusercontent.com/monkeytypegame/monkeytype/refs/heads/master/frontend/static/quotes/english.json | jq -r '.quotes[].text | sub("\n";" ";"g")' > "$file"; then
            rm "$file"
            exit 1
        fi
    fi
    text=$(awk "$qsize" $file | shuf -n1)
elif [ "$zen" != "" ]; then
    file=~/.local/share/typist/zen/$zen
    if [ ! -f "$file" ]; then
        >&2 echo downloading story "$zen"
        mkdir -p "$(dirname "$file")"
        if ! curl -sS --fail https://raw.githubusercontent.com/nkanaev/zen101/refs/heads/master/stories/en/"$zen" > "$file"; then
            rm "$file"
            exit 1
        fi
    fi
    text=$(cat "$file")
elif [ "$reddit" == "true" ]; then
     text=$(curl -sS --fail --user-agent 'firefox' 'https://www.reddit.com/r/stories/new.json'| 
         jq -c '.data.children[].data| (.title + "\n\n" + .selftext)' | shuf -n 1 | jq -r .)
     sanitize
else
    if [ "$lang" == "os" ]; then
        file="/usr/share/dict/words"
    elif [ "$lang" == "keybr" ]; then
        file=!/.local/share/typist/languages/keybr
        if [ ! -f "$file" ]; then
            >&2 echo downloading "$lang"
            mkdir -p "$(dirname "$file")"
            if ! curl -sS --fail https://raw.githubusercontent.com/aradzie/keybr.com/refs/heads/master/packages/keybr-content-words/lib/data/words-en.json | jq -r '.[]' > "$file"; then
                rm "$file"
                exit 1
            fi
        fi
    else
        file=~/.local/share/typist/languages/$lang
        if [ ! -f "$file" ]; then
            >&2 echo downloading "$lang"
            mkdir -p "$(dirname "$file")"
            if ! curl -sS --fail https://raw.githubusercontent.com/monkeytypegame/monkeytype/refs/heads/master/frontend/static/languages/"$lang".json | jq -r '.words[]' > "$file"; then
                rm "$file"
                exit 1
            fi
        fi
    fi

    text=""
    while IFS='' read -r word; do
        if [ $caps == "all" ] || ( [ $caps == "rand" ] && (( RANDOM % 2 == 1 ))); then
            word=$(echo "${word:0:1}" | tr '[:lower:]' '[:upper:]')${word:1}
        fi
        if [ "$symbols" != "" ] && (( RANDOM % 2 == 1)); then
            i=$(( RANDOM % ${#symbols} ))
            ch="${symbols:i:1}"
            case "$ch" in
            "&"|"@"|"#"|"("|"{"|'['|'<')
                text+=" $ch$word"
                ;;
            "_")
                text+="_$word"
                ;;
            "-")
                text+=" - $word"
                ;;
            \`|"'"|"\"")
                text+=" $ch$word$ch"
                ;;
            *)
                text+=" $word$ch"
                ;;
            esac
        else 
            text+=" $word"
        fi
    done < <(shuf -n "$n" "$file")
    text=${text:1} # rm leading space
fi

if [ ! -t 1 ]; then
    echo "$text"
    exit
fi

# adjust width
xx=$(( ( $(tput cols) - w ) / 2))
if ((xx<5)); then
    w=$(( $(tput cols) - 10 ))
    xx=$(( ( $(tput cols) - w ) / 2))
fi
((xx++))
if ((xx<0)); then
    >&2 echo text width too long
    exit 1
fi

# fold paragraphs
lines=()
while IFS='' read -r line; do
    len=${#line}
    if ((len<w)); then
        lines+=($((len+1)))
    else
        while IFS='' read -r ln; do
            lines+=(${#ln})
        done < <(echo "$line" | fold -s -w "$w")
        last=${#lines[@]}
        ((last--))
        ((lines[last]++))
    fi
done <<< "$text"
last=${#lines[@]}
((last--))
((lines[last]--))

chars=${#text}
lcount=${#lines[@]}

# height
ht=${#lines[@]}
if ((ht>h)); then
    ht=h
fi
yy=$(( ( $(tput lines) - ht ) / 2 ))
((yy++))
if ((yy<0)); then
    >&2 echo text height too long
    exit 1
fi

if [ ! -t 0 ]; then
    exec 0<>/dev/tty
fi

tput smcup # start altscreen
tput cnorm # show cursor
printf '\033[4 q' # change cursor to underline

on_exit() {
    time=$SECONDS
    tput rmcup # end altscreen
    printf '\033[0 q' # change cursor to default
    if ((time==0)) || ((i==0)); then
        return
    fi

    # compute indent
    indent=0
    from=0
    for len in "${lines[@]}"; do
        if ((from>=i)); then
            break
        fi
        line="${text:from:len}"
        leading_whitespace="${line/[^ ]*/}"
        ((indent += ${#leading_whitespace}))
        ((from+=len))
    done

    ((i-=indent))
    gwpm=$(bc <<< "scale=2; $i * 60 / 5 / $time" )
    acc=$(bc <<< "scale=2; $i * 100 / $keys")
    nwpm=$(bc <<< "scale=2; $gwpm*$acc/100")
    cat << EOF
Net WPM   $nwpm
Gross WPM $gwpm
Accuracy  $acc
Errors    $errors
Chars     $i
Time      $time sec
EOF
}
trap on_exit EXIT

min() {
    printf "%s" $(( $1 < $2 ? $1 : $2 ))
}

err_char() {
    if [[ "$1" == ' ' ]]; then
        echo -n "$space_char"
    elif [[ "$1" == $'\n' ]]; then
        echo -n "$newline_char"
    else
        echo -n "$1"
    fi
}

# set cursor postion
pos() {
    tput cup $(($1-1)) $(($2-1))
}

setfg() {
    if ((typo<0)); then
        echo -n "$green"
    else
        echo -n "$red"
    fi
}

redraw() {
    tput civis
    tlen=$i
    local i=0
    local y=0
    for line in "${lines[@]:0:$vline}"; do
        ((i+=line))
    done
    echo -n "$reset"
    for line in "${lines[@]:$vline:$h}"; do
        line_len=$line
        pos $((y+yy)) $xx

        glen=$tlen
        if ((typo>=0)); then
            glen=$typo
        fi
        if ((glen>i)); then
            len=$(min $((glen-i)) line)
            echo -n "$green${text:i:len}$reset"
            ((i+=len))
            ((line-=len))
        fi
        if ((typo>=0 && typo<=i)); then
            echo -n "$red"
            while ((i<tlen && line>0)); do
                printf "%s" "$(err_char "${typed:i:1}")"
                ((i++))
                ((line--))
            done
            echo -n "$reset"
        fi
        echo -n "${text:i:line}"
        ((i+=line))

        if [[ "${text:i-1:1}" == $'\n' ]]; then
            pos $((y+yy)) $((xx+line_len-1))
            echo -n "$newline"
        fi
        ((y++))
        tput el
    done
    pos $((y+yy+1)) $((xx+w/2))
    if ((vline+h<lcount)); then
        printf "⌄"
    else
        printf " "
    fi
    pos $yy $xx
    setfg
    tput cnorm
}

begin() {
    vline=0
    i=0
    typo=-1
    typed=""
    keys=0
    errors=0
    redraw
}
begin

while IFS='' read -d '' -rsn1 char; do
    ((keys++))
    if (( keys == 1 )); then
        SECONDS=0
    fi 
    case "$char" in
    $'\0') # enter
        char=$'\n'
        ;;
    $'\e') # escape
        read -rsn1 ignore
        if [[ "$ignore" == $'\x7f' ]]; then
            char="erase_word"
        elif [[ "$ignore" == $'\e' ]]; then
            break # double escape
        else
            read -rsn1 ignore # arrow keys
            continue;
        fi
        ;;
    $'\t') # tab -> begin
        begin
        continue ;;
    esac
    if [[ "$char" == "erase_word" ]]; then
        while ((i>0)) && [[ "${typed:i-1:1}" == ' ' ]]; do
            typed=${typed:0:${#typed}-1}
            ((i--))
        done
        while ((i>0)) && [[ "${typed:i-1:1}" != ' ' ]]; do
            typed=${typed:0:${#typed}-1}
            ((i--))
        done
        if ((typo>i)); then
            echo -n "$green"
            typo=-1
        fi
        redraw
    elif [[ "$char" == $'\x7f' ]]; then
        if [[ $i == 0 ]]; then
            continue
        fi
        typed=${typed:0:${#typed}-1}
        ((i--))
        if ((typo==i)); then
            echo -n "$green"
            typo=-1
        fi
        # skip indent backward
        if ((typo<0)) && [[ "${text:i:1}" == ' ' ]]; then
            while true; do
                if ((i == 0 )); then
                    break
                fi
                ch="${text:i-1:1}"
                if [[ "$ch" != ' ' ]] && [[ "$ch" != $'\n' ]]; then
                    break
                fi
                ((i--))
                typed=${typed:0:${#typed}-1}
                if [[ "$ch" == $'\n' ]]; then
                    break
                fi
            done
        fi
    else
        if [[ "${text:i:1}" != [[:ascii:]] ]]; then
            char=${text:i:1}
        fi
        typed+="$char"
        if [[ "$char" != "${text:i:1}" ]]; then
            ((errors++))
            if ((typo<0)); then
                echo -n "$red"
                typo=$i
            fi
        fi
        if ((typo<0)); then
            echo -n "$char"
        else
            echo -n "$(err_char "$char")"
        fi
        ((i++))
        # skip indent forward
        if ((typo<0)) && [[ "${text:i-1:1}" == $'\n' ]]; then
            rem=${text:i}
            leading_whitespace="${rem/[^ ]*/}"
            ((i += ${#leading_whitespace}))
            typed+=$leading_whitespace
        fi
    fi

    if (( i == chars )) && ((typo<0)); then
        time=$SECONDS
        break
    fi

    # update cursor pos
    y=0
    x=$i
    for line in "${lines[@]}"; do
        if (( x < line )); then
            break
        fi
        ((y++))
        x=$(( x - line ))
    done
    while (( x > w )); do
        ((x-=w))
        ((y++))
    done
    ((y-=vline))
    if ((y>=h-1)); then
        up=0
        while ((vline+up+1+h<=lcount && y-up-1>=0)); do
            ((up++))
        done
        if ((typo>=0)); then
            ((up--)) # ensure typo visible
        fi
        if ((up>0)); then
            ((vline+=up))
            ((y-=up))
            redraw
        fi
    elif ((y<0)); then
        if ((vline>0)); then
            ((vline--))
            ((y++))
            redraw
        fi
    fi
    ((x+=xx))
    ((y+=yy))
    pos $y $x

    if [[ "$char" == $'\x7f' ]]; then
        ch=' '
        if (( i < ${#text} )); then
            ch="${text:i:1}"
        fi
        if [[ "$ch" == $'\n' ]]; then
            ch=$newline
        fi
        echo -n "$reset$ch"
        pos $y $x
        setfg
    fi
done
