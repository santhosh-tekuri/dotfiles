#!/usr/bin/env bash

lang=english
n=50
f=100
caps=none

usage=$(cat <<EOF
USAGE: typist [options...]

-l <language>       monkeytype language
                    default english
-n <words>          number of words
                    default 50
-c                  captalize words randomly
-C                  capitalize all words
-f <num>            fold after num chars
-h                  show this help
EOF
)

args=$(getopt hl:n:cC $*)
if [ $? -ne 0 ]; then
    >&2 echo "$usage"
    exit 2
fi
set -- $args
while :; do
    case "$1" in
    -h)
        echo "$usage"
        exit 0
        ;;
    -l)
        lang=$2
        shift; shift
        ;;
    -n)
        n=$2
        shift; shift
        ;;
    -c)
        caps=rand
        shift
        ;;
    -C)
        caps=all
        shift
        ;;
    --)
        shift; break
        ;;
    esac
done

file=~/.local/share/typist/languages/$lang
if [ ! -f $file ]; then
    >&2 echo downloading $lang
    mkdir -p $(dirname $file)
    curl -s https://raw.githubusercontent.com/monkeytypegame/monkeytype/refs/heads/master/frontend/static/languages/$lang.json | jq -r '.words[]' > $file
fi

text=""
while IFS='' read -r word; do
    if [ $caps == "all" ] || ( [ $caps == "rand" ] && (( $RANDOM % 2 == 1 ))); then
        word=$(echo ${word:0:1} | tr '[:lower:]' '[:upper:]')${word:1}
    fi
    text+=" $word"
done < <(shuf -n $n $file)
text=${text:1}

if [ ! -t 1 ]; then
    echo "$text"
    exit
fi

chars=${#text}
IFS=$'\n' read -d '' -r -a lines < <(echo "$text" | fold -s -w $f)

w=$(tput cols)
h=$(tput lines)
xx=$(( ( $w - $f ) / 2))
yy=$(( ( $h - ${#lines[@]} ) / 2 ))

stty -echo # diable echo
printf '\e[?1049h' # start altscreen
printf '\e[2J' # clear screen
printf '\e[?25h' # show cursor

cleanup() {
    printf '\e[?1049l' # end altscreen
    stty echo # enable echo
}
trap cleanup EXIT

y=$yy
for line in "${lines[@]}"; do
    printf '\e[%d;%dH' $y $xx # set cursor pos
    echo -n $line
    ((y++))
done
printf '\e[%d;%dH' $yy $xx # set cursor pos
i=0
while IFS='' read -rsn1 char; do
    if [[ "$char" == $'\0' ]]; then
        # on enter break
        break
    fi

    if [[ "$char" == $'\x7f' ]]; then
        if [[ $i == 0 ]]; then
            continue
        fi
        ((i--))
    else
        if [[ "$char" == "${text:i:1}" ]]; then
            printf '\e[32m%c\e[m' "$char"
        else
            printf '\e[31m%c\e[m' "$char"
        fi
        ((i++))
    fi

    if (( $i == $chars )); then
        break
    fi

    # update cursor pos
    y=0
    x=$i
    for line in "${lines[@]}"; do
        if (( $x < ${#line} )); then
            break
        fi
        ((y++))
        x=$(( $x - ${#line} )) 
    done
    ((x+=xx))
    ((y+=yy))
    printf '\e[%d;%dH' $y $x # set cursor pos

    if [[ "$char" == $'\x7f' ]]; then
        printf '%c' "${text:i:1}"
        printf '\e[%d;%dH' $y $x # set cursor pos
    fi
done

